generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String     @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  username              String?    @unique
  gender                String?
  birthdate             DateTime?
  subscriptionStatus    String?    @default("free")
  subscriptionExpiryDate DateTime?
  accounts              Account[]
  sessions              Session[]
  bookmarks             Bookmark[]
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bookmark {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  articleTitle       String
  articleDescription String?
  articleUrl         String
  articleUrlToImage  String?
  articlePublishedAt DateTime
  articleSource      String
  articleContent     String?
  createdAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, articleTitle])
}